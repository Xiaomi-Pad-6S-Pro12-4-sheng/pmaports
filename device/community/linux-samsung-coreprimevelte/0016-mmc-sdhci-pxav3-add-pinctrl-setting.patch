From 3ba74b32791276b58f52582a96f5637249a64388 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Duje=20Mihanovi=C4=87?= <duje@dujemihanovic.xyz>
Date: Thu, 10 Jul 2025 13:57:29 +0200
Subject: [PATCH 16/16] mmc: sdhci-pxav3: add pinctrl setting
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Different bus clocks require different pinctrl states to remain stable.
Add support for selecting between a default and uhs state according to
the bus clock.

Signed-off-by: Duje MihanoviÄ‡ <duje@dujemihanovic.xyz>
---
 drivers/mmc/host/sdhci-pxav3.c          | 30 ++++++++++++++++++++++++-
 include/linux/platform_data/pxa_sdhci.h |  3 +++
 2 files changed, 32 insertions(+), 1 deletion(-)

diff --git a/drivers/mmc/host/sdhci-pxav3.c b/drivers/mmc/host/sdhci-pxav3.c
index 3fb56face3d8..44cb06b12156 100644
--- a/drivers/mmc/host/sdhci-pxav3.c
+++ b/drivers/mmc/host/sdhci-pxav3.c
@@ -20,9 +20,11 @@
 #include <linux/module.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
+#include <linux/pinctrl/consumer.h>
 #include <linux/pm.h>
 #include <linux/pm_runtime.h>
 #include <linux/mbus.h>
+#include <linux/units.h>
 
 #include "sdhci.h"
 #include "sdhci-pltfm.h"
@@ -313,8 +315,24 @@ static void pxav3_set_power(struct sdhci_host *host, unsigned char mode,
 		mmc_regulator_set_ocr(mmc, mmc->supply.vmmc, vdd);
 }
 
+static void pxav3_set_clock(struct sdhci_host *host, unsigned int clock)
+{
+	struct platform_device *pdev = to_platform_device(mmc_dev(host->mmc));
+	struct sdhci_pxa_platdata *pdata = pdev->dev.platform_data;
+
+	if (clock < 100 * HZ_PER_MHZ) {
+		if (!IS_ERR(pdata->state_default))
+			pinctrl_select_state(pdata->pinctrl, pdata->state_default);
+	} else {
+		if (!IS_ERR(pdata->state_uhs))
+			pinctrl_select_state(pdata->pinctrl, pdata->state_uhs);
+	}
+
+	sdhci_set_clock(host, clock);
+}
+
 static const struct sdhci_ops pxav3_sdhci_ops = {
-	.set_clock = sdhci_set_clock,
+	.set_clock = pxav3_set_clock,
 	.set_power = pxav3_set_power,
 	.platform_send_init_74_clocks = pxav3_gen_init_74_clocks,
 	.get_max_clock = sdhci_pltfm_clk_get_max_clock,
@@ -441,6 +459,16 @@ static int sdhci_pxav3_probe(struct platform_device *pdev)
 			host->mmc->pm_caps |= pdata->pm_caps;
 	}
 
+	pdata->pinctrl = devm_pinctrl_get(dev);
+	if (IS_ERR(pdata->pinctrl))
+		dev_warn(dev, "could not get pinctrl handle\n");
+	pdata->state_default = pinctrl_lookup_state(pdata->pinctrl, "default");
+	if (IS_ERR(pdata->state_default))
+		dev_warn(dev, "could not get default state\n");
+	pdata->state_uhs = pinctrl_lookup_state(pdata->pinctrl, "state_uhs");
+	if (IS_ERR(pdata->state_uhs))
+		dev_warn(dev, "could not get uhs state\n");
+
 	pm_runtime_get_noresume(&pdev->dev);
 	pm_runtime_set_active(&pdev->dev);
 	pm_runtime_set_autosuspend_delay(&pdev->dev, PXAV3_RPM_DELAY_MS);
diff --git a/include/linux/platform_data/pxa_sdhci.h b/include/linux/platform_data/pxa_sdhci.h
index 899457cee425..15738b885b98 100644
--- a/include/linux/platform_data/pxa_sdhci.h
+++ b/include/linux/platform_data/pxa_sdhci.h
@@ -47,5 +47,8 @@ struct sdhci_pxa_platdata {
 	unsigned int	quirks;
 	unsigned int	quirks2;
 	unsigned int	pm_caps;
+	struct pinctrl *pinctrl;
+	struct pinctrl_state *state_default;
+	struct pinctrl_state *state_uhs;
 };
 #endif /* _PXA_SDHCI_H_ */
-- 
2.50.1

